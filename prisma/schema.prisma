generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Class {
    id        String    @id @default(cuid())
    classDay  Day
    classHour ClassHour
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    Lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId String

    Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String

    Classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
    classroomId String

    Teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
    teacherId String

    @@unique([classroomId, teacherId, organizationId])
}

model Classroom {
    id              String            @id @default(cuid())
    code            String
    classLevel      ClassLevel
    branch          Branch?
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    Class           Class[]
    ClassroomLesson ClassroomLesson[]

    Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String

    Teacher          Teacher? @relation(fields: [advisorTeacherId], references: [id], onDelete: Cascade)
    advisorTeacherId String?

    @@unique([code, classLevel, organizationId])
    @@index([organizationId])
}

model Lesson {
    id              String            @id @default(cuid())
    code            String
    name            String
    description     String?
    type            LessonType
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    TeacherLesson   TeacherLesson[]
    ClassroomLesson ClassroomLesson[]
    Class           Class[]
}

model ClassroomLesson {
    id         String   @id @default(cuid())
    weeklyHour Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    Classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
    classroomId String

    Lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId String

    Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String

    @@unique([classroomId, lessonId, organizationId])
}

model TeacherLesson {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
    teacherId String

    Lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId String

    Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String

    @@unique([teacherId, lessonId, organizationId])
}

// * e.g. Teacherid:1 from orgId:1 can work on Monday(C1,C2,C3,C7,C8) AND Tuesday(C1,C2,C3) AND Wednesday(all) so
// * There will be three records in TeacherWorkPreferance for teacherId:1 from orgId:1
// * @@unique([workingDay, teacherId, organizationId]) ensures that.
model TeacherWorkPreferance {
    id          String      @id @default(cuid())
    workingDay  Day
    workingHour ClassHour[]
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String

    Teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
    teacherId String

    @@unique([workingDay, teacherId, organizationId])
}

model Teacher {
    id                    String                  @id @default(cuid())
    name                  String
    surname               String
    description           String?
    department            String?
    createdAt             DateTime                @default(now())
    updatedAt             DateTime                @updatedAt
    TeacherWorkPreferance TeacherWorkPreferance[]
    Classroom             Classroom[]
    Class                 Class[]
    TeacherLesson         TeacherLesson[]

    Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String

    User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String? @unique // * This is nullable because a teacher can be added by admin without a user account

    @@unique([userId, organizationId])
    @@index([organizationId])
}

model OrganizationClassHour {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    firstHour   String
    secondHour  String
    thirdHour   String
    fourthHour  String
    fifthHour   String
    sixthHour   String
    seventhHour String
    eighthHour  String

    Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String

    @@unique([organizationId])
    @@index([organizationId])
}

model Organization {
    id                    String                  @id @default(cuid())
    name                  String
    description           String?
    contact               String?                 @db.Text
    firstConfiguration    Boolean                 @default(false)
    createdAt             DateTime                @default(now())
    updatedAt             DateTime                @updatedAt
    users                 User[]
    teachers              Teacher[]
    TeacherWorkPreferance TeacherWorkPreferance[]
    Classroom             Classroom[]
    Class                 Class[]
    OrganizationClassHour OrganizationClassHour?
    TeacherLesson         TeacherLesson[]
    ClassroomLesson       ClassroomLesson[]
}

model User {
    id         String      @id @default(cuid())
    email      String      @unique
    password   String
    name       String
    surname    String
    image      String?
    globalRole GlobalRole  @default(ORGMEMBER)
    memberRole MemberRole?
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt

    Organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId String?
    Teacher        Teacher?

    @@index(organizationId)
}

enum Branch {
    MF
    TM
    TS
    DIL
}

enum LessonType {
    COMPULSORY
    ELECTIVE
    DEPARTMENTAL_COMPULSORY
}

enum ClassLevel {
    L9
    L10
    L11
    L12
}

enum Day {
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Saturday
    Sunday
}

enum ClassHour {
    C1
    C2
    C3
    C4
    C5
    C6
    C7
    C8
}

enum GlobalRole {
    SUPERADMIN
    ORGMEMBER
}

enum MemberRole {
    MANAGER
    TEACHER
}
